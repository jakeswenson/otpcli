on:
  push:
    tags:
      - 'v*'

name: Release

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Delete Previous Draft Releases
        uses: jakeswenson/action-delete-latest-release@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout # needed so that changelog generator can pull the latest release tag
        uses: actions/checkout@v2
      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v0.3.2
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: true
          prerelease: false
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  build-release:
    name: Release Build
    needs: create_release
    strategy:
      matrix:
        build:
          - name: 'linux-no-features'
            type: linux
            features: no-default
            os: ubuntu-latest
          - name: 'linux'
            type: linux
            features: default
            os: ubuntu-latest
            publish: true
          - name: 'macos'
            type: mac
            features: default
            os: macos-10.15
    runs-on: ${{matrix.build.os}}
    if: false # disable for now
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies for default features on linux
        if: matrix.build.features == 'default' && matrix.build.type == 'linux'
        run: sudo apt-get install libdbus-1-dev libxcb-shape0 libxcb-shape0-dev libxcb-xfixes0-dev libxcb-xfixes0
      - name: build
        env:
          FEATURE_BUILD: ${{matrix.build.features}}
        run: .ci/build.sh
      - name: Prepare for upload
        env:
          DEPLOY_NAME: ${{matrix.build.name}}
        run: .ci/setup_deploy.sh
      - uses: actions/upload-artifact@v2
        with:
          name: otpcli-${{matrix.build.name}}
          path: ./deploy/otpcli-${{matrix.build.name}}
      - uses: actions/upload-artifact@v2
        with:
          name: archive ${{matrix.build.name}}
          path: ./deploy/otpcli.${{matrix.build.name}}.tar.xz
      - name: Cargo Publish
        if: matrix.build.publish == true
        run: cargo publish --locked --token "${{secrets.crates_token}}"
      - name: Upload Release Bin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url:  ${{needs.create_release.outputs.upload_url}} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./deploy/otpcli-${{matrix.build.name}}
          asset_name: otpcli.${{matrix.build.name}}
          asset_content_type: application/octet-stream
      - name: Upload Release Tar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url:  ${{needs.create_release.outputs.upload_url}} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./deploy/otpcli.${{matrix.build.name}}.tar.xz
          asset_name: otpcli.${{matrix.build.name}}.tar.xz
          asset_content_type: application/tar
